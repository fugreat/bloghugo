<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 小夫子的随笔</title>
    <link>http://fuyi.fun/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on 小夫子的随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 24 Mar 2021 11:42:15 +0800</lastBuildDate><atom:link href="http://fuyi.fun/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mysql开启外网访问</title>
      <link>http://fuyi.fun/2021/03/24/mysql%E5%BC%80%E5%90%AF%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Wed, 24 Mar 2021 11:42:15 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/24/mysql%E5%BC%80%E5%90%AF%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/</guid>
      <description>Mysql 开放外网访问： 用mysql -uroot -p 登陆mysql，然后采用以下方法开启远程访问权限：
 mysql&amp;gt;use mysql; mysql&amp;gt;update user set host = &#39;%&#39; where user = &#39;root&#39;; mysql&amp;gt;FLUSH PRIVILEGES； </description>
    </item>
    
    <item>
      <title>Node的Arraybuffer做大小端转换</title>
      <link>http://fuyi.fun/2021/03/24/node%E7%9A%84arraybuffer%E5%81%9A%E5%A4%A7%E5%B0%8F%E7%AB%AF%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 24 Mar 2021 11:31:34 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/24/node%E7%9A%84arraybuffer%E5%81%9A%E5%A4%A7%E5%B0%8F%E7%AB%AF%E8%BD%AC%E6%8D%A2/</guid>
      <description>Nodejs 的 ArrayBuffeer大小端序转换：
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32
// 创建 ArrayBuffer const buffer = new ArrayBuffer(4); // 赋初始值 var bytes = new Uint32Array(buffer) bytes[0] = 0x05; bytes[1] = 0x00; bytes[2] = 0x00; bytes[3] = 0x00; // buffer和Dataview const view = new DataView(buffer); // 按小端序取出数据 console.log(&amp;quot;小端序：&amp;quot;+view.getUint32(0, 1)); // 按大端序取出数据 console.log(&amp;quot;大端序：&amp;quot;+ view.getUint32(0, 0)); </description>
    </item>
    
    <item>
      <title>蓝牙官网生成蓝牙服务的uuid</title>
      <link>http://fuyi.fun/2021/01/27/%E8%93%9D%E7%89%99%E5%AE%98%E7%BD%91%E7%94%9F%E6%88%90%E8%93%9D%E7%89%99%E6%9C%8D%E5%8A%A1%E7%9A%84uuid/</link>
      <pubDate>Wed, 27 Jan 2021 08:54:18 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/01/27/%E8%93%9D%E7%89%99%E5%AE%98%E7%BD%91%E7%94%9F%E6%88%90%E8%93%9D%E7%89%99%E6%9C%8D%E5%8A%A1%E7%9A%84uuid/</guid>
      <description>蓝牙如何申请厂商UUID
参考论坛： https://devzone.nordicsemi.com/f/nordic-q-a/7260/how-to-acquire-a-vendor-base-uuid/25668#25668
建议用此处工具生成UUID
不需要注册和付费
Bluetooth SIG recommends you to just use the tool found here to generate your UUID. It is extremely unlikely that you will generate a UUID that collides with some other company, so you are not required to register or pay for it. I am not not even sure the SIG even gives you the option to register it at the moment.
生成UUID的国际组织： https://www.itu.int/en/ITU-T/asn1/Pages/UUID/uuids.aspx
生成UUID的界面： https://www.itu.int/en/ITU-T/asn1/Pages/UUID/generate_uuid.aspx</description>
    </item>
    
    <item>
      <title>Nano Pb</title>
      <link>http://fuyi.fun/2021/01/27/nano-pb/</link>
      <pubDate>Wed, 27 Jan 2021 08:13:36 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/01/27/nano-pb/</guid>
      <description>一、起因 在新的检测设备中需要做主从机通信。
二、筛选 目前使用最广泛到modbus通信了。当时移植了modbus到nrf52 和 stm32，但是移植后寄存器协议很麻烦，字节长度都是16bit也不太适合当前32位单片机。 并且在与APP通信中，前端又没有很好的库适配modbus。
三、发现 犹疑间偶然发现nrf52的sdk里面提供了一个外部通信协议库 nano-pb，程序小巧，又可兼容和APP通信，深得我心。所以移植到系统中测试下可靠性。
四、使用 4.1 下载移植 移植过程参考了几篇文章，写的比较全面的就是这个了nanopb的安装和使用. 下载最新的库可以从这里Nanopb - downloads
最新的版本是0.4.4 目录如下
 tree -L 1 . ├── AUTHORS.txt ├── BUILD.bazel ├── CHANGELOG.txt ├── CMakeLists.txt ├── CONTRIBUTING.md ├── LICENSE.txt ├── Package.swift ├── README.md ├── WORKSPACE ├── build.py ├── conan-wrapper ├── conanfile.py ├── docs ├── examples ├── extra ├── generator ├── generator-bin ├── library.json ├── pb.h ├── pb_common.c ├── pb_common.h ├── pb_decode.c ├── pb_decode.h ├── pb_encode.</description>
    </item>
    
    <item>
      <title>Modbus 相关的基本概念</title>
      <link>http://fuyi.fun/2021/01/08/modbus-%E7%9B%B8%E5%85%B3%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Fri, 08 Jan 2021 09:49:01 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/01/08/modbus-%E7%9B%B8%E5%85%B3%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>变量 Coil是bit变量； Register是整形16bit变量；
四种数据类型：    名称 变量类型 读写     Discretes Input 位变量 只读   Coils 位变量 读写   Input Registers 16-bit整型 只读   Holding Registers 16-bit整型 读写     线圈状态(coil)， 离散输入状态(discrete) 保持寄存器(holding) 输入寄存器(input)。
这四种寄存器的分类有其历史原因。
因为Modbus起源于PLC通信，而PLC是基于非易失性存储介质的，所以使用了coil和holding来表示PLC内部的非易失性变量， 使用了discrete和input来表示PLC外界的信号。 但现在的系统，其寄存器基本都是掉电丢失的，无论使用哪个来称呼这些寄存器，都会感到有些困惑。
保守的做法，是利用自定义命令来读写这些易失性寄存器，但是这样做会丧失通用性，而且很多现成的移植也失效了。 更方便的方法还是按读写能力来分类， 单纯地将coil和holding理解为可读写寄存器，
而把discrete和input理解为协议里的只读寄存器。
Modbus协议的coil和discrete，针对的是位寄存器；holding和input，针对的是16位寄存器。但这两者也是模糊的。光靠coil和discrete，或者光靠holding和input，其实都已足够。两套方法都可以用，让我这种选择困难患者感觉很难取舍。我最后的方案是，不管什么寄存器，全用holding和input。
【参考文档】：Modbus总结 【参考文档】:移植Modbus到STM32F103</description>
    </item>
    
    <item>
      <title>Pip安装太慢更换为国内源</title>
      <link>http://fuyi.fun/2020/11/27/pip%E5%AE%89%E8%A3%85%E5%A4%AA%E6%85%A2%E6%9B%B4%E6%8D%A2%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/</link>
      <pubDate>Fri, 27 Nov 2020 12:56:33 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/27/pip%E5%AE%89%E8%A3%85%E5%A4%AA%E6%85%A2%E6%9B%B4%E6%8D%A2%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/</guid>
      <description>如题：
pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple PyQt5 国内源： 清华：https://pypi.tuna.tsinghua.edu.cn/simple
中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/
华中理工大学：http://pypi.hustunique.com/
山东理工大学：http://pypi.sdutlinux.org/
豆瓣：http://pypi.douban.com/simple/</description>
    </item>
    
    <item>
      <title>Docker镜像构建和发布</title>
      <link>http://fuyi.fun/2020/11/26/docker%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E5%92%8C%E5%8F%91%E5%B8%83/</link>
      <pubDate>Thu, 26 Nov 2020 11:21:54 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/26/docker%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E5%92%8C%E5%8F%91%E5%B8%83/</guid>
      <description>构建： docker build - &amp;lt; Dockerfile 发布：  打tag  docker tag fa1dad7f37e4 fugreat/nrf52 push  docker push fugreat/nrf52 </description>
    </item>
    
    <item>
      <title>Docker覆盖entrypoint</title>
      <link>http://fuyi.fun/2020/11/25/docker%E8%A6%86%E7%9B%96entrypoint/</link>
      <pubDate>Wed, 25 Nov 2020 10:17:53 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/25/docker%E8%A6%86%E7%9B%96entrypoint/</guid>
      <description>在使用docker简化编译环境搭建过程中碰到一个问题是 pull下来的镜像默认提供entrypoint，自动对指定的目录进行编译(运行make)。
但是在实际使用过程中，可能需要带参数或者make不同的目标。
因为需要屏蔽掉默认的entrypoint。
屏蔽方法是：
# 进入镜像的， 运行bash docker run -it --entrypoint /bin/bash [docker_image] # 在上面基础上运行自己想要的指令，如 docker run -it --entrypoint /bin/bash -c &amp;quot;cd /code &amp;amp;&amp;amp; make -j8 &amp;amp;&amp;amp; make flash&amp;quot; [docker_imag】 </description>
    </item>
    
    <item>
      <title>在线绘制cad</title>
      <link>http://fuyi.fun/2020/11/16/%E5%9C%A8%E7%BA%BF%E7%BB%98%E5%88%B6cad/</link>
      <pubDate>Mon, 16 Nov 2020 12:06:11 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/16/%E5%9C%A8%E7%BA%BF%E7%BB%98%E5%88%B6cad/</guid>
      <description>MxDraw 在线打开、绘制cad文件 http://www.mxdraw.com/help_5_20101.html
支持js调用；
需要在win下浏览的本级安装插件才可以使用；
macOS支持不好；</description>
    </item>
    
    <item>
      <title>Rt Thread_线程</title>
      <link>http://fuyi.fun/2020/11/12/rt-thread_%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Thu, 12 Nov 2020 09:32:42 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/12/rt-thread_%E7%BA%BF%E7%A8%8B/</guid>
      <description>动态线程和静态线程范例 thread1 是一个静态线程对象，而 thread2 是一个动态线程对象。
thread1 对象的内存空间，包括线程控制块 thread1 与栈空间 thread1_stack 都是编译时决定的，因为代码中都不存在初始值，都统一放在未初始化数据段中。
thread2 运行中用到的空间都是动态分配的，包括线程控制块（thread2_ptr 指向的内容）和栈空间。
静态对象会占用 RAM 空间，不依赖于内存堆管理器，内存分配时间确定。 动态对象则依赖于内存堆管理器，运行时申请 RAM 空间，当对象被删除后，占用的 RAM 空间被释放。 这两种方式各有利弊，可以根据实际环境需求选择具体使用方式。
/* 线程 1 的对象和运行时用到的栈 */ static struct rt_thread thread1; static rt_uint8_t thread1_stack[512]; /* 线程 1 入口 */ void thread1_entry(void* parameter) { int i; while (1) { for (i = 0; i &amp;lt; 10; i ++) { rt_kprintf(&amp;#34;%d\n&amp;#34;, i); /* 延时 100ms */ rt_thread_mdelay(100); } } } /* 线程 2 入口 */ void thread2_entry(void* parameter) { int count = 0; while (1) { rt_kprintf(&amp;#34;Thread2 count:%d\n&amp;#34;, ++count); /* 延时 50ms */ rt_thread_mdelay(50); } } /* 线程例程初始化 */ int thread_sample_init() { rt_thread_t thread2_ptr; rt_err_t result; /* 初始化线程 1 */ /* 线程的入口是 thread1_entry，参数是 RT_NULL * 线程栈是 thread1_stack * 优先级是 200，时间片是 10 个 OS Tick */ result = rt_thread_init(&amp;amp;thread1, &amp;#34;thread1&amp;#34;, thread1_entry, RT_NULL, &amp;amp;thread1_stack[0], sizeof(thread1_stack), 200, 10); /* 启动线程 */ if (result == RT_EOK) rt_thread_startup(&amp;amp;thread1); /* 创建线程 2 */ /* 线程的入口是 thread2_entry, 参数是 RT_NULL * 栈空间是 512，优先级是 250，时间片是 25 个 OS Tick */ thread2_ptr = rt_thread_create(&amp;#34;thread2&amp;#34;, thread2_entry, RT_NULL, 512, 250, 25); /* 启动线程 */ if (thread2_ptr !</description>
    </item>
    
    <item>
      <title>RT-Thread_编程指南</title>
      <link>http://fuyi.fun/2020/11/12/rt-thread_%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 12 Nov 2020 09:25:45 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/12/rt-thread_%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</guid>
      <description>RT-Thread 编程指南 https://www.rt-thread.org/document/site/programming-manual/basic/basic/
 内核架构： 实时内核的实现包括：对象管理、线程管理及调度器、线程间通信管理、时钟管理及内存管理等等，内核最小的资源占用情况是 3KB ROM，1.2KB RAM。
 RT-Thread 启动流程 RT-Thread 支持多种平台和多种编译器，而 rtthread_startup() 函数是 RT-Thread 规定的统一启动入口。 一般执行顺序是：
系统先从启动文件开始运行， 然后进入 RT-Thread 的启动 rtthread_startup() ，
最后进入用户入口 main()，如下图所示：  启动代码
int rtthread_startup(void) { rt_hw_interrupt_disable(); /* 板级初始化：需在该函数内部进行系统堆的初始化 */ rt_hw_board_init(); /* 打印 RT-Thread 版本信息 */ rt_show_version(); /* 定时器初始化 */ rt_system_timer_init(); /* 调度器初始化 */ rt_system_scheduler_init(); #ifdef RT_USING_SIGNALS  /* 信号初始化 */ rt_system_signal_init(); #endif  /* 由此创建一个用户 main 线程 */ rt_application_init(); /* 定时器线程初始化 */ rt_system_timer_thread_init(); /* 空闲线程初始化 */ rt_thread_idle_init(); /* 启动调度器 */ rt_system_scheduler_start(); /* 不会执行至此 */ return 0; } 大致可以分为四个部分：</description>
    </item>
    
    <item>
      <title>Stm32_adc的参考源设置</title>
      <link>http://fuyi.fun/2020/11/12/stm32_adc%E7%9A%84%E5%8F%82%E8%80%83%E6%BA%90%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Thu, 12 Nov 2020 09:02:37 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/12/stm32_adc%E7%9A%84%E5%8F%82%E8%80%83%E6%BA%90%E8%AE%BE%E7%BD%AE/</guid>
      <description>转 STM32内部参照电压VREFIN的使用 https://blog.csdn.net/uncle_guo/article/details/50625660
每个STM32芯片都有一个内部的参照电压，相当于一个标准电压测量点，在芯片内部连接到ADC1的通道17。
根据数据手册中的数据，这个参照电压的典型值是1.20V，最小值是1. 16V，最大值是1.24V。
这个电压基本不随外部供电电压的变化而变化。
ADC的参考电压都是通过Vref+提供的。
100脚以上的型号，Vref+引到了片外，引脚名称为Vref+；
64脚和小于64脚的型号，Vref+在芯片内部与VCC信号线相连，没有引到片外，这样AD的参考电压就是VCC上的电压。
在ADC的外部参考电压波动，或因为Vref+在芯片内部与VCC相连而VCC变化的情况下，如果对于ADC测量的准确性要求不高时，可以使用这个内部参照电压得到ADC测量的电压值。
具体方法是在测量某个通道的电压值之前，先读出参照电压的ADC测量数值，记为ADrefint；再读出要测量通道的ADC转换数值，记为ADchx；则要测量的电压为：
Vchx = Vrefint * (ADchx/ADrefint)
其中Vrefint为参照电压=1.20V（STM32F107）。
如何用VDDA作为ADC参考电压，当测量信号电压超过这个范围可以用精密电阻分压或者放大器分压，或者选择合适的外部电压基准芯片。</description>
    </item>
    
    <item>
      <title>LED滚动屏</title>
      <link>http://fuyi.fun/2020/11/11/led%E6%BB%9A%E5%8A%A8%E5%B1%8F/</link>
      <pubDate>Wed, 11 Nov 2020 13:11:58 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/led%E6%BB%9A%E5%8A%A8%E5%B1%8F/</guid>
      <description>LED 滚动屏模组
模组（单元板）上的显示接口：显示接口是用于控制卡和模组（单元板）、模组（单元板）和模组（单元板）之间的连接，以将控制信号进行传递。
由于存在不同的扫描方式及信号线的不同排列顺序，也就有不同的接口定义。使用最多的是08接口、12接口、75接口、40接口。
室内单双色点阵单元板多用08接口，
户外单双色模组多用12接口，
扫描驱动的全彩模组多用75接口，
静态驱动的全彩模组多用40接口。
接口定义 不同的接口定义主要是信号线的排列顺序不一样，首先我们来了解下控制信号有哪些：
  CLK（时钟信号）：提供给移位寄存器的移位脉冲，每一个脉冲的上升沿将引起数据移入或移出一位。
数据口上的数据必须与时钟信号协调才能正常传送数据，数据信号的频率必须是时钟信号的频率的1/2倍。
在任何情况下，当时钟信号有异常时，会使整板显示杂乱无章。
  STB（锁存信号）：将移位寄存器内的数据送到锁存器，并将其数据内容通过驱动电路点亮LED显示出来。
但由于驱动电路受OE（输出使能信号）控制，其点亮的前提必须是OE为开启状态。
锁存信号也必须要与时钟信号协调才能显示出完整的图像。
在任何情况下，当锁存信号有异常时，会使整板显示杂乱无章。
  OE（输出使能信号）：整屏亮度控制信号，也用于显示屏消隐。
只要调整它的占空比就可以控制亮度的变化。当使能信号出现异常时，整屏将会出现不亮、暗亮或拖尾等现象。
  R/G/B（数据信号）：提供显示图像所需要的数据。必须与时钟信号协调才能将数据传送到任何一个显示点。 一般在显示屏中红绿蓝的数据信号分离开来，若某数据信号短路到正极或负极时，则对应的该颜色将会出现全亮或不亮， 当数据信号被悬空时对应的颜色显示情况不定。
  ABCD（行控制信号）：只有在动态扫描显示时才存在，一般电路会搭配74HC138D的IC进行控制， 1/4扫描中只要AB信号就可以了。 当行控制信号出现异常时，将会出现显示错位、高亮或图像重叠等现象。
  </description>
    </item>
    
    <item>
      <title>RK3288 编译三部曲</title>
      <link>http://fuyi.fun/2020/11/11/rk3288-%E7%BC%96%E8%AF%91%E4%B8%89%E9%83%A8%E6%9B%B2/</link>
      <pubDate>Wed, 11 Nov 2020 12:48:55 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/rk3288-%E7%BC%96%E8%AF%91%E4%B8%89%E9%83%A8%E6%9B%B2/</guid>
      <description> 安装相应依赖库文件，以及交叉编译工具和配置环境变量； 编译u-boot； 编译kernel； 编译android；     下载文件
https://blog.csdn.net/Chhjnavy/article/details/96739573
  RK3288 android7.1.2 内核极其源码编译详细步骤
https://blog.csdn.net/Chhjnavy/article/details/95043440?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight
  自动编译
https://blog.csdn.net/shao15232/article/details/102487625
https://blog.csdn.net/chhjnavy/article/details/95043440?utm_medium=distribute.pc_relevant.none-task-blog-title-1&amp;amp;spm=1001.2101.3001.4242
  </description>
    </item>
    
    <item>
      <title>Linux常用命令</title>
      <link>http://fuyi.fun/2020/11/11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 11 Nov 2020 12:45:43 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description> scp 限速 scp 限速
-l 是限速配置
-l limit 其中 -l 5000 大约是 5000/8 600多点KB/S
 多核编译 make -jN N表示使能的核数
 </description>
    </item>
    
    <item>
      <title>esp32 mesh WI-FI MESH</title>
      <link>http://fuyi.fun/2020/11/11/esp32-mesh-wi-fi-mesh/</link>
      <pubDate>Wed, 11 Nov 2020 10:44:51 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/esp32-mesh-wi-fi-mesh/</guid>
      <description>官方文档： https://docs.espressif.com/projects/esp-idf/zh_CN/stable/get-started/index.html
MacOS下搭建开发环境 https://docs.espressif.com/projects/esp-idf/zh_CN/stable/get-started/macos-setup.html
网络拓扑说明： https://docs.espressif.com/projects/esp-idf/en/stable/api-guides/mesh.html</description>
    </item>
    
    <item>
      <title>Nodejs遍历数组</title>
      <link>http://fuyi.fun/2020/11/11/nodejs%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/</link>
      <pubDate>Wed, 11 Nov 2020 10:38:21 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/nodejs%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/</guid>
      <description>nodejs 遍历数组： 参考： https://blog.csdn.net/he_min/article/details/82912729
var array = [1,2,3]; // 方式一： array.forEach(function(v,index,a){ console.log(v); console.log(index); console.log(a); }); // 方式二： array.forEach(v =&amp;gt; console.log(v)); </description>
    </item>
    
    <item>
      <title>【转载】在线门禁通信协议</title>
      <link>http://fuyi.fun/2020/11/11/%E8%BD%AC%E8%BD%BD%E5%9C%A8%E7%BA%BF%E9%97%A8%E7%A6%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Wed, 11 Nov 2020 10:23:32 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/%E8%BD%AC%E8%BD%BD%E5%9C%A8%E7%BA%BF%E9%97%A8%E7%A6%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</guid>
      <description>&lt;h2 id=&#34;查询设备&#34;&gt;查询设备&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>使用封面图片的shortcode</title>
      <link>http://fuyi.fun/2017/05/20/%E4%BD%BF%E7%94%A8%E5%B0%81%E9%9D%A2%E5%9B%BE%E7%89%87%E7%9A%84shortcode/</link>
      <pubDate>Sat, 20 May 2017 12:00:23 +0200</pubDate>
      
      <guid>http://fuyi.fun/2017/05/20/%E4%BD%BF%E7%94%A8%E5%B0%81%E9%9D%A2%E5%9B%BE%E7%89%87%E7%9A%84shortcode/</guid>
      <description>&lt;p&gt;在页面中添加封面的shortcode。
复制下面的代码进你的page，修改相关的路径。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
