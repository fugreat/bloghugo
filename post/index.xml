<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 小夫子的随笔</title>
    <link>http://fuyi.fun/post/</link>
    <description>Recent content in Posts on 小夫子的随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 08 Apr 2022 20:26:01 +0800</lastBuildDate><atom:link href="http://fuyi.fun/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fedora从命令行启动</title>
      <link>http://fuyi.fun/2022/04/08/fedora%E4%BB%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Fri, 08 Apr 2022 20:26:01 +0800</pubDate>
      
      <guid>http://fuyi.fun/2022/04/08/fedora%E4%BB%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8/</guid>
      <description>Fedora 从命令行启动
一、实现代码 删除目标链接并创建新的符号链接 （1）从命令行启动
ln-sf /lib/systemd/system/multi-user.target /etc/systemd/system/default. target （2）从图形界面启动
ln-sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target 二、代码解释 ln命令：是一个在文件之间建立链接的命令，默认情况是硬链接（hard link），我们要用的是符号链接（symboli link），它可以为在不同文件系统中文件创建链接。 Options：-s 创建符号链接 -f 删除已经存在的同名链接 oneof the Usages：ln [被链接目标] [链接文件或目录] Example：ln -s xx yy 为xx创建一个符号链接yy</description>
    </item>
    
    <item>
      <title>功率与dbm的对照表 </title>
      <link>http://fuyi.fun/2021/11/25/%E5%8A%9F%E7%8E%87%E4%B8%8Edbm%E7%9A%84%E5%AF%B9%E7%85%A7%E8%A1%A8/</link>
      <pubDate>Thu, 25 Nov 2021 11:39:26 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/11/25/%E5%8A%9F%E7%8E%87%E4%B8%8Edbm%E7%9A%84%E5%AF%B9%E7%85%A7%E8%A1%A8/</guid>
      <description>功率与dbm的对照表 对于无线工程师来说更常用分贝dBm这个单位，dBm单位表示相对于1毫瓦的分贝数，dBm和W之间的关系是：dBm=10lg(mW)1w的功率，换算成dBm就是10×lg1000＝30dBm。2w是33dBm，4W是36dBm……大家发现了吗？瓦数增加一倍，dBm就增加3。为什么要用dBm做单位？原因大致有几个：1、对于无线信号的衰减来说，不是线性的，而是成对数关系衰减的。用分贝更能体现这种关系。2、用分贝做单位比用瓦做单位更容易描述，往往在发射机出来的功率几十上百瓦，到了接收端已经是以微微瓦来计算了。3、计算方便，衰减的计算公式用分贝来计算只用做加减法就可以了。 以1mW 为基准的dB算法，即0dBm=1mW，dBm=10log(Power/1mW)。 发射功率dBm－路径损失dB＝接收信号强度dBm 最小通信功率dBm－路径损失dB≥接收灵敏度下限dBm 最小通信功率dBm≥路径损失dB＋接收灵敏度下限dBm 功率单位mw和dbm的换算表 dBm mW 0 1.0 mW 1 1.3 mW 2 1.6 mW 3 2.0 mW 4 2.5 mW 5 3.2 mW 6 4.0 mW 7 5.0 mW 8 6.0 mW 9 8.0 mW 10 10 mW 11 13 mW 12 16 mW 13 20 mW 14 25 mW 15 32 mW 16 40 mW 17 50 mW 18 64 mW 19 80 mW 20 100 mW 21 128 mW 22 160 mW 23 200 mW 24 250 mW 25 320 mW 26 400mW 27 500mW 28 640mW 29 800mW 30 1.</description>
    </item>
    
    <item>
      <title>Docker去掉sudo</title>
      <link>http://fuyi.fun/2021/11/25/docker%E5%8E%BB%E6%8E%89sudo/</link>
      <pubDate>Thu, 25 Nov 2021 11:36:29 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/11/25/docker%E5%8E%BB%E6%8E%89sudo/</guid>
      <description>Docker sudo
查看用户组及成员
sudo cat /etc/group | grep docker
可以添加docker组
sudo groupadd docker
添加用户到docker组
sudo gpasswd -a ${USER} docker
增加读写权限
sudo chmod a+rw /var/run/docker.sock
重启docker
sudo systemctl restart docker</description>
    </item>
    
    <item>
      <title>Win10下自动运行脚本</title>
      <link>http://fuyi.fun/2021/11/25/win10%E4%B8%8B%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Thu, 25 Nov 2021 11:34:17 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/11/25/win10%E4%B8%8B%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</guid>
      <description>Win10 下自动运行脚本
https://www.lidaren.com/archives/1656
————————————————————————
@echo off ::检测时间间隔，单位：秒 set _interval=5 ::需要守护的进程名称 set _processName=ProcessName ::需要守护的进程启动命令 set _processCmd=C:\xxxx.exe ::需要守护的进程预估启动完毕所需时间，单位：秒 set _processTimeout=10 ::需要守护的进程所监听的端口 set _port=8080 ::进程用户名，一般是Administrator set _username=Administrator ————————————————————————
@echo off :LOOP set /a isAlive=false ::通过进程名称检测 ::tasklist /FI &amp;#34;username eq %_username%&amp;#34; | find /C &amp;#34;%_processName%&amp;#34; &amp;gt; temp.txt ::set /p num= &amp;lt; temp.txt ::del /F temp.txt ::通过进程的端口是否正在被监听检测 netstat -an | find /C &amp;#34;0.0.0.0:%_port%&amp;#34; &amp;gt; temp.txt set /p num= &amp;lt; temp.txt del /F temp.txt if &amp;#34;%num%&amp;#34; == &amp;#34;0&amp;#34; ( start %_processCmd% | echo 启动 %_processName% 于 %time% choice /D y /t %_processTimeout% &amp;gt; nul ) if &amp;#34;%num%&amp;#34; NEQ &amp;#34;0&amp;#34; echo 已启动 ::ping -n %_interval% 127.</description>
    </item>
    
    <item>
      <title>IOT安全标准</title>
      <link>http://fuyi.fun/2021/11/25/iot%E5%AE%89%E5%85%A8%E6%A0%87%E5%87%86/</link>
      <pubDate>Thu, 25 Nov 2021 11:32:20 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/11/25/iot%E5%AE%89%E5%85%A8%E6%A0%87%E5%87%86/</guid>
      <description>IoT 安全 https://www.gov.uk/government/publications/secure-by-design/code-of-practice-for-consumer-iot-security ￼ Guidelines
  No default passwords All IoT device passwords shall be unique and not resettable to any universal factory default value
  Implement a vulnerability disclosure policy All companies that provide internet-connected devices and services shall provide a public point of contact as part of a vulnerability disclosure policy in order that security researchers and others are able to report issues. Disclosed vulnerabilities should be acted on in a timely manner.</description>
    </item>
    
    <item>
      <title>Ubuntu网络配置</title>
      <link>http://fuyi.fun/2021/07/14/ubuntu%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 14 Jul 2021 13:44:05 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/07/14/ubuntu%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</guid>
      <description>参考：http://www.3gcomet.com/ubuntu20-04中使用netplan配置网络/
cat /etc/netplan/00-installer-config.yaml # This is the network config written by &amp;#39;subiquity&amp;#39; network: ethernets: enp1s0: dhcp4: true #addresses: #- 172.18.225.240/24 #gateway4: 172.18.225.254 nameservers: addresses: - 223.6.6.6 - 223.5.5.5 search: [] version: 2 </description>
    </item>
    
    <item>
      <title>Ubuntu18</title>
      <link>http://fuyi.fun/2021/04/29/ubuntu18/</link>
      <pubDate>Thu, 29 Apr 2021 09:26:32 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/04/29/ubuntu18/</guid>
      <description>Ubuntu 18.04 安装nodejs 12
参考连接： https://linuxize.com/post/how-to-install-node-js-on-ubuntu-18.04/
curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - sudo apt update sudo apt install nodejs node --version npm --version </description>
    </item>
    
    <item>
      <title>Ubuntu开关图形界面</title>
      <link>http://fuyi.fun/2021/03/24/ubuntu%E5%BC%80%E5%85%B3%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/</link>
      <pubDate>Wed, 24 Mar 2021 12:14:30 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/24/ubuntu%E5%BC%80%E5%85%B3%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/</guid>
      <description>Ubuntu 开关图形界面 开启关闭图形界面 关闭用户图形界面，使用tty登录。 sudo systemctl set-default multi-user.target 开启用户图形界面。 sudo systemctl set-default graphical.target 重启后生效： sudo reboot </description>
    </item>
    
    <item>
      <title>Ubuntu命令行种子下载</title>
      <link>http://fuyi.fun/2021/03/24/ubuntu%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A7%8D%E5%AD%90%E4%B8%8B%E8%BD%BD/</link>
      <pubDate>Wed, 24 Mar 2021 12:10:32 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/24/ubuntu%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A7%8D%E5%AD%90%E4%B8%8B%E8%BD%BD/</guid>
      <description>Ubuntu 命令行种子下载
sudo apt-get install rtorrent rtorrent 启动
按Enter 选择种子文件
按下箭头选择文件
Ctrl + s 开始
Ctrl + d 暂停
Ctrl + q 退出</description>
    </item>
    
    <item>
      <title>Ubuntu增加sudo权限</title>
      <link>http://fuyi.fun/2021/03/24/ubuntu%E5%A2%9E%E5%8A%A0sudo%E6%9D%83%E9%99%90/</link>
      <pubDate>Wed, 24 Mar 2021 12:08:50 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/24/ubuntu%E5%A2%9E%E5%8A%A0sudo%E6%9D%83%E9%99%90/</guid>
      <description>ubuntu 增加sudoer
https://www.cnblogs.com/jiangz/p/4183461.html
方法一、使用usermod命令
新增user
sudo adduser username
增加sudo权限
sudo usermod -aG sudo username
sudo usermod -aG sudo 方法二、修改/etc/sudoers文件
修改文件前先开通root
具体方法是：Ubuntu技巧之 is not in the sudoers file解决方法_Linux教程_Linux公社-Linux系统门户网站
修改文件前先开通root，如果没看通，问题很严重。就是修改了/etc/sudoer权限之后再改不回去了，导致当前用户的sudo权限也没有了，需要进入 recovery模式修复。见ubuntu手贱改了sudoers权限之后的恢复 - piaomiao1314 - 博客园</description>
    </item>
    
    <item>
      <title>Ubuntu增加swap分区</title>
      <link>http://fuyi.fun/2021/03/24/ubuntu%E5%A2%9E%E5%8A%A0swap%E5%88%86%E5%8C%BA/</link>
      <pubDate>Wed, 24 Mar 2021 12:05:03 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/24/ubuntu%E5%A2%9E%E5%8A%A0swap%E5%88%86%E5%8C%BA/</guid>
      <description># 创建文件： sudo fallocate -l 1G /swapfile # 设置为swapfile sudo chmod 600 /swapfile sudo mkswap /swapfile # 激活： sudo swapon /swapfile # 在/etc/fstab中写入配置，开机自动激活 /swapfile swap swap defaults 0 0 # 查看是否激活： sudo swapon --show 参考：https://www.sysgeek.cn/ubuntu-18-04-swap/</description>
    </item>
    
    <item>
      <title>Gitlab部署</title>
      <link>http://fuyi.fun/2021/03/24/gitlab%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Wed, 24 Mar 2021 12:03:35 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/24/gitlab%E9%83%A8%E7%BD%B2/</guid>
      <description>Gitlab 部署 参考连接： https://docs.gitlab.com/omnibus/docker/
设置中文： 用户自行设置： https://blog.csdn.net/wh2574021892/article/details/106062266/ 管理员设置： https://blog.csdn.net/weixin_44257023/article/details/109249769
gitlab 仓库备份: https://www.cnblogs.com/mingerlcm/p/12633720.html
Gitlab修改域名： https://www.gaotengjiao.com/gitlab%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80%E4%BF%AE%E6%94%B9%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/
修改gitlab.yml文件，在如下位置中：
[root@localhost]# cd /opt/gitlab/embedded/service/gitlab-rails/config [root@localhost]# vi gitlab.yml gitlab: ## Web server settings (note: host is the FQDN, do not include http://) host: 此处修改成自己的域名 port: 80 https: false gitlab-ctl restart </description>
    </item>
    
    <item>
      <title>部署私有化邮箱</title>
      <link>http://fuyi.fun/2021/03/24/%E9%83%A8%E7%BD%B2%E7%A7%81%E6%9C%89%E5%8C%96%E9%82%AE%E7%AE%B1/</link>
      <pubDate>Wed, 24 Mar 2021 11:57:27 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/24/%E9%83%A8%E7%BD%B2%E7%A7%81%E6%9C%89%E5%8C%96%E9%82%AE%E7%AE%B1/</guid>
      <description>安装mailcow 邮箱 1.官网查看安装教程 2.LAST： 爬的坑： 报错：ERROR: Invalid interpolation format for “environment” option in service “postfix-mailcow”: “REDIS_SLAVEOF_IP=${REDIS_SLAVEOF_IP:-}”
解决方案： 参考：https://community.mailcow.email/d/39-docker-composeyml-errors-redis-slaveof-ip-oom-kill-disable docker-compose版本太低，更新到1.28就好了；
更新方法：  sudo pip3 install --upgrade docker-comopse 
其实安装文档里面着重的说明了需要最新版本的docker-compose，又跳步了。。。 ￼
配置dns： https://low.bi/p/r7VbxEKo3zA#h3-4
# Name Type Value mail IN A 1.2.3.4（服务器ip） autodiscover IN CNAME mail autoconfig IN CNAME mail @ IN MX 10 mail 3.论坛 可搜索异常问题 https://community.mailcow.email/</description>
    </item>
    
    <item>
      <title>小团队代码管理</title>
      <link>http://fuyi.fun/2021/03/24/%E5%B0%8F%E5%9B%A2%E9%98%9F%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 24 Mar 2021 11:55:32 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/24/%E5%B0%8F%E5%9B%A2%E9%98%9F%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/</guid>
      <description>如何在小团队内实践代码管理？ 1.使用gitee 或 gitlab 托管代码 gitee: 优点：wiki和项目管理比较好用，速度快，不用维护； 缺点：免费的只能5个人一下的小团队
gitlab: 优点：免费；docker下部署很简单； 缺点：需要一台服务器或vps 并且需要维护；
github bitbucket 太慢不考虑 2. 使用mailcow建立公司邮箱系统，用于创建公司人员账号； 必要条件：域名、服务器
3.使用培训：培训基本git操作，设置各开发组负责人，确保日常代码提交； 4.通过访谈评估代码管理效果 </description>
    </item>
    
    <item>
      <title>Nrf52打印浮点数据</title>
      <link>http://fuyi.fun/2021/03/24/nrf52%E6%89%93%E5%8D%B0%E6%B5%AE%E7%82%B9%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Wed, 24 Mar 2021 11:52:16 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/24/nrf52%E6%89%93%E5%8D%B0%E6%B5%AE%E7%82%B9%E6%95%B0%E6%8D%AE/</guid>
      <description>Nrf52 打印浮点数据：
https://devzone.nordicsemi.com/f/nordic-q-a/18625/nrf_log_info-does-not-show-float-number
NRF_LOG_INFO(&amp;#34;My float number&amp;#34; NRF_LOG_FLOAT_MARKER &amp;#34;\r\n&amp;#34;, NRF_LOG_FLOAT(f))) </description>
    </item>
    
    <item>
      <title>Git使用培训</title>
      <link>http://fuyi.fun/2021/03/24/git%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/</link>
      <pubDate>Wed, 24 Mar 2021 11:50:00 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/24/git%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/</guid>
      <description>一、代码仓库的登陆方法： 内网访问：192.168.130.13 外网访问：登陆vpn后，访问10.8.0.11  二、 Git使用说明： 服用说明： 2.1和2.2是文字说明；
2.3和2.4是视频； 单纯学会操作可以看2.1 或 2.3 学习原理的话看：2.2 学习设计思路的话可以膜拜2.4
2.1【入门】Git使用说明： http://rogerdudler.github.io/git-guide/index.zh.html
2.2【精通】Git 图解： http://marklodato.github.io/visual-git-guide/index-zh-cn.html
2.3【bilibili视频教程】 【git：2小时从入门到精通】https://www.bilibili.com/video/BV1Mf4y117f3?from=search&amp;amp;seid=10359461753628766284
2.4 【进阶】 【git之父Linus在Ted上访谈】https://www.bilibili.com/video/BV1db411j73A?from=search&amp;amp;seid=10359461753628766284</description>
    </item>
    
    <item>
      <title>Mysql开启外网访问</title>
      <link>http://fuyi.fun/2021/03/24/mysql%E5%BC%80%E5%90%AF%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Wed, 24 Mar 2021 11:42:15 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/24/mysql%E5%BC%80%E5%90%AF%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/</guid>
      <description>Mysql 开放外网访问： 用mysql -uroot -p 登陆mysql，然后采用以下方法开启远程访问权限：
 mysql&amp;gt;use mysql; mysql&amp;gt;update user set host = &amp;#39;%&amp;#39; where user = &amp;#39;root&amp;#39;; mysql&amp;gt;FLUSH PRIVILEGES； </description>
    </item>
    
    <item>
      <title>Node的Arraybuffer做大小端转换</title>
      <link>http://fuyi.fun/2021/03/24/node%E7%9A%84arraybuffer%E5%81%9A%E5%A4%A7%E5%B0%8F%E7%AB%AF%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 24 Mar 2021 11:31:34 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/24/node%E7%9A%84arraybuffer%E5%81%9A%E5%A4%A7%E5%B0%8F%E7%AB%AF%E8%BD%AC%E6%8D%A2/</guid>
      <description>Nodejs 的 ArrayBuffeer大小端序转换：
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32
// 创建 ArrayBuffer const buffer = new ArrayBuffer(4); // 赋初始值 var bytes = new Uint32Array(buffer) bytes[0] = 0x05; bytes[1] = 0x00; bytes[2] = 0x00; bytes[3] = 0x00; // buffer和Dataview const view = new DataView(buffer); // 按小端序取出数据 console.log(&amp;#34;小端序：&amp;#34;+view.getUint32(0, 1)); // 按大端序取出数据 console.log(&amp;#34;大端序：&amp;#34;+ view.getUint32(0, 0)); </description>
    </item>
    
    <item>
      <title>Ubuntu修改sh</title>
      <link>http://fuyi.fun/2021/03/09/ubuntu%E4%BF%AE%E6%94%B9sh/</link>
      <pubDate>Tue, 09 Mar 2021 16:02:28 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/09/ubuntu%E4%BF%AE%E6%94%B9sh/</guid>
      <description>Ubuntu 修改默认的sh为bash
如果要修改默认的sh，可以采用命令
sudo dpkg-reconfigure dash 选 no
验证： ls -l /bin/sh</description>
    </item>
    
    <item>
      <title>Ubuntu关闭熄屏</title>
      <link>http://fuyi.fun/2021/03/01/ubuntu%E5%85%B3%E9%97%AD%E7%86%84%E5%B1%8F/</link>
      <pubDate>Mon, 01 Mar 2021 12:16:03 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/03/01/ubuntu%E5%85%B3%E9%97%AD%E7%86%84%E5%B1%8F/</guid>
      <description># 关闭息屏，最后0是代表关闭锁屏，将0替换为60代表60s后自动息屏，以此类推。 gsettings set org.gnome.desktop.session idle-delay 0 # 关闭锁屏 gsettings set org.gnome.desktop.screensaver lock-enabled false </description>
    </item>
    
    <item>
      <title>Openvpn配置</title>
      <link>http://fuyi.fun/2021/02/25/openvpn%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 25 Feb 2021 15:56:18 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/02/25/openvpn%E9%85%8D%E7%BD%AE/</guid>
      <description>服务器端配置服务 Ubuntu下：
# 下载VPN安装文件： curl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh # 安装/删除vpn/增加用户 sudo bash openvpn-install.sh 增加用户后得到xxxx.ovpn
给到vpn用户即可。
客户端启动VPN 运行指令：
openvpn /home/kakj/vpn/key_from_vpn_admin.ovpn 1&amp;gt;&amp;gt;/dev/null 2&amp;gt;&amp;gt;/dev/null &amp;amp; 解决所有流量都走vpn的问题 默认配置下，所有流量都从VPN走，这样网比较卡；
在*.ovpn文件中增加配置：
route-nopull route 10.8.0.0 255.255.0.0 vpn_gateway route 172.16.1.0 255.255.255.0 vpn_gateway </description>
    </item>
    
    <item>
      <title>Win10安装VPN</title>
      <link>http://fuyi.fun/2021/02/25/win10%E5%AE%89%E8%A3%85vpn/</link>
      <pubDate>Thu, 25 Feb 2021 12:57:50 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/02/25/win10%E5%AE%89%E8%A3%85vpn/</guid>
      <description>Win10安装VPN 1.下载安装文件 点此下载VPN安装程序Win10
得到安装包压缩文件：
解压得到安装包：
2.安装 双击安装
一直下一步安装完成 双击图标打开程序: 3.导入配置 联系运维（FJX）获取登陆配置文件，每个人的配置文件都不同。
把配置文件拖拽到此处： 点击ADD完成添加： 4.开始使用 出现下面界面完成VPN连接： </description>
    </item>
    
    <item>
      <title>Ubuntu下部署jar</title>
      <link>http://fuyi.fun/2021/02/23/ubuntu%E4%B8%8B%E9%83%A8%E7%BD%B2jar/</link>
      <pubDate>Tue, 23 Feb 2021 11:36:00 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/02/23/ubuntu%E4%B8%8B%E9%83%A8%E7%BD%B2jar/</guid>
      <description>ubuntu 下部署jar 1.安装jdk 8 https://vitux.com/how-to-install-java-on-ubuntu-20-04/
sudo apt install openjdk-8-jdk openjdk-8-jre java -version cat &amp;gt;&amp;gt; /etc/environment &amp;lt;&amp;lt;EOL JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 JRE_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre EOL 2.运行jar https://blog.csdn.net/bencheng06/article/details/102491420
3.docker下部署jar https://blog.csdn.net/a835269079/article/details/102519209</description>
    </item>
    
    <item>
      <title>在nrf52中增加自定义服务</title>
      <link>http://fuyi.fun/2021/01/27/%E5%9C%A8nrf52%E4%B8%AD%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Wed, 27 Jan 2021 13:30:09 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/01/27/%E5%9C%A8nrf52%E4%B8%AD%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/</guid>
      <description>在nrf52中增加自定义服务 官方教程写的很详细：
https://github.com/NordicPlayground/nRF5x-custom-ble-service-tutorial</description>
    </item>
    
    <item>
      <title>蓝牙官网生成蓝牙服务的uuid</title>
      <link>http://fuyi.fun/2021/01/27/%E8%93%9D%E7%89%99%E5%AE%98%E7%BD%91%E7%94%9F%E6%88%90%E8%93%9D%E7%89%99%E6%9C%8D%E5%8A%A1%E7%9A%84uuid/</link>
      <pubDate>Wed, 27 Jan 2021 08:54:18 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/01/27/%E8%93%9D%E7%89%99%E5%AE%98%E7%BD%91%E7%94%9F%E6%88%90%E8%93%9D%E7%89%99%E6%9C%8D%E5%8A%A1%E7%9A%84uuid/</guid>
      <description>蓝牙如何申请厂商UUID
参考论坛： https://devzone.nordicsemi.com/f/nordic-q-a/7260/how-to-acquire-a-vendor-base-uuid/25668#25668
建议用此处工具生成UUID
不需要注册和付费
Bluetooth SIG recommends you to just use the tool found here to generate your UUID. It is extremely unlikely that you will generate a UUID that collides with some other company, so you are not required to register or pay for it. I am not not even sure the SIG even gives you the option to register it at the moment.
生成UUID的国际组织： https://www.itu.int/en/ITU-T/asn1/Pages/UUID/uuids.aspx
生成UUID的界面： https://www.itu.int/en/ITU-T/asn1/Pages/UUID/generate_uuid.aspx</description>
    </item>
    
    <item>
      <title>Nano Pb</title>
      <link>http://fuyi.fun/2021/01/27/nano-pb/</link>
      <pubDate>Wed, 27 Jan 2021 08:13:36 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/01/27/nano-pb/</guid>
      <description>一、起因 在新的检测设备中需要做主从机通信。
二、筛选 目前使用最广泛到modbus通信了。当时移植了modbus到nrf52 和 stm32，但是移植后寄存器协议很麻烦，字节长度都是16bit也不太适合当前32位单片机。 并且在与APP通信中，前端又没有很好的库适配modbus。
三、发现 犹疑间偶然发现nrf52的sdk里面提供了一个外部通信协议库 nano-pb，程序小巧，又可兼容和APP通信，深得我心。所以移植到系统中测试下可靠性。
四、使用 4.1 下载移植 移植过程参考了几篇文章，写的比较全面的就是这个了nanopb的安装和使用. 下载最新的库可以从这里Nanopb - downloads
最新的版本是0.4.4 目录如下
 tree -L 1 . ├── AUTHORS.txt ├── BUILD.bazel ├── CHANGELOG.txt ├── CMakeLists.txt ├── CONTRIBUTING.md ├── LICENSE.txt ├── Package.swift ├── README.md ├── WORKSPACE ├── build.py ├── conan-wrapper ├── conanfile.py ├── docs ├── examples ├── extra ├── generator ├── generator-bin ├── library.json ├── pb.h ├── pb_common.c ├── pb_common.h ├── pb_decode.c ├── pb_decode.h ├── pb_encode.</description>
    </item>
    
    <item>
      <title>使用docker安装vpn</title>
      <link>http://fuyi.fun/2021/01/20/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85vpn/</link>
      <pubDate>Wed, 20 Jan 2021 11:38:39 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/01/20/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85vpn/</guid>
      <description>使用 docker 快速搭建一个 VPN 服务器
你还在一条条命令复制粘贴搭建 SVN 服务器？快别麻烦了，一个 docker 镜像就都帮你搞定了。如果你的服务器安装了 docker，直接使用以下命令 （要修改你自己的账户和密码信息哦）拉取一个已经配置好的 VPN 镜像就可以直接使用了，不用那么那麻烦的自己又改配置文件又要安装软件。
docker run \ --name ipsec-vpn-server \ --restart=always \ -e VPN_IPSEC_PSK=你的PSK密码 \ -e VPN_USER=你的VPN用户名 \ -e VPN_PASSWORD=你的VPN密码 \ -p 500:500/udp \ -p 4500:4500/udp \ -v /lib/modules:/lib/modules:ro \ -d --privileged \ hwdsl2/ipsec-vpn-server 参考连接：使用 docker 快速搭建一个 VPN 服务器</description>
    </item>
    
    <item>
      <title>安标外壳要求</title>
      <link>http://fuyi.fun/2021/01/12/%E5%AE%89%E6%A0%87%E5%A4%96%E5%A3%B3%E8%A6%81%E6%B1%82/</link>
      <pubDate>Tue, 12 Jan 2021 09:19:49 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/01/12/%E5%AE%89%E6%A0%87%E5%A4%96%E5%A3%B3%E8%A6%81%E6%B1%82/</guid>
      <description>《安标审核-矿用气体测定器_检测报警仪》 3836.4-2010 第6章：外壳基本要求 爬电距离和爬电间隙： 《安标审核-环境监测用传感器气体类》 </description>
    </item>
    
    <item>
      <title>Modbus 相关的基本概念</title>
      <link>http://fuyi.fun/2021/01/08/modbus-%E7%9B%B8%E5%85%B3%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Fri, 08 Jan 2021 09:49:01 +0800</pubDate>
      
      <guid>http://fuyi.fun/2021/01/08/modbus-%E7%9B%B8%E5%85%B3%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>变量 Coil是bit变量； Register是整形16bit变量；
四种数据类型：    名称 变量类型 读写     Discretes Input 位变量 只读   Coils 位变量 读写   Input Registers 16-bit整型 只读   Holding Registers 16-bit整型 读写     线圈状态(coil)， 离散输入状态(discrete) 保持寄存器(holding) 输入寄存器(input)。
这四种寄存器的分类有其历史原因。
因为Modbus起源于PLC通信，而PLC是基于非易失性存储介质的，所以使用了coil和holding来表示PLC内部的非易失性变量， 使用了discrete和input来表示PLC外界的信号。 但现在的系统，其寄存器基本都是掉电丢失的，无论使用哪个来称呼这些寄存器，都会感到有些困惑。
保守的做法，是利用自定义命令来读写这些易失性寄存器，但是这样做会丧失通用性，而且很多现成的移植也失效了。 更方便的方法还是按读写能力来分类， 单纯地将coil和holding理解为可读写寄存器，
而把discrete和input理解为协议里的只读寄存器。
Modbus协议的coil和discrete，针对的是位寄存器；holding和input，针对的是16位寄存器。但这两者也是模糊的。光靠coil和discrete，或者光靠holding和input，其实都已足够。两套方法都可以用，让我这种选择困难患者感觉很难取舍。我最后的方案是，不管什么寄存器，全用holding和input。
【参考文档】：Modbus总结 【参考文档】:移植Modbus到STM32F103</description>
    </item>
    
    <item>
      <title>在stm32中引入jlink调试_JLINK RTT</title>
      <link>http://fuyi.fun/2020/12/25/%E5%9C%A8stm32%E4%B8%AD%E5%BC%95%E5%85%A5jlink%E8%B0%83%E8%AF%95_jlink-rtt/</link>
      <pubDate>Fri, 25 Dec 2020 14:24:50 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/12/25/%E5%9C%A8stm32%E4%B8%AD%E5%BC%95%E5%85%A5jlink%E8%B0%83%E8%AF%95_jlink-rtt/</guid>
      <description>目标 在STM32工程中使用JLINK-RTT输出日志
方法   连接JLINK 与开发版，使用SWD接口;
  增加RTT功能
   在程序中引入RTT库  git submodule add https://github.com/ankitmcgill/ARM_SEGGER_RTT   工程中增加SEGGER_RTT代码
  此时在工程中可以使用 SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...);打印日志；
  通过宏定义把日志输出函数定义为想要的形式，如：
  #define myprintf(...) SEGGER_RTT_printf(0, __VA_ARGS__) 参考文档 【JLink RTT Client代替printf(IAR测试OK)】
【segger RTT viewer串口打印调试日志】</description>
    </item>
    
    <item>
      <title>标准解读：GBT9969 2008工业产品使用说明书</title>
      <link>http://fuyi.fun/2020/12/16/%E6%A0%87%E5%87%86%E8%A7%A3%E8%AF%BBgbt9969-2008%E5%B7%A5%E4%B8%9A%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E4%B9%A6/</link>
      <pubDate>Wed, 16 Dec 2020 09:00:08 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/12/16/%E6%A0%87%E5%87%86%E8%A7%A3%E8%AF%BBgbt9969-2008%E5%B7%A5%E4%B8%9A%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E4%B9%A6/</guid>
      <description>标准解读：GBT9969-2008工业产品使用说明书、总则
文档链接：GBT9969-2008
基本要求  说明书内容 产品用途和使用范围 根据产品特点给出： 主要结构、性能、型号、规格 吊运、安装、使用、操作、维修、保养、贮存；   应提供：必要的环保和节约能源方面的内容； 易燃易爆有毒有腐蚀有放射性的产品，说明书应包含注意事项、防护措施和发生意外时的紧急处理方法； 对于安全限制有要求或存在有效年限的产品应提供产品上的生产日期和有效期； 实行生产许可证管理的产品，应在包装上标注有效的生产许可证编号；  模版 概述
安全使用注意事项
结构特征与工作原理
技术特性
尺寸重量
安装、调整
使用操作
故障分析与排除
安全保护装置与事故处理
保养维护
运输贮存
开箱及检查 环保及其他
图、表、照片</description>
    </item>
    
    <item>
      <title>Pip安装太慢更换为国内源</title>
      <link>http://fuyi.fun/2020/11/27/pip%E5%AE%89%E8%A3%85%E5%A4%AA%E6%85%A2%E6%9B%B4%E6%8D%A2%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/</link>
      <pubDate>Fri, 27 Nov 2020 12:56:33 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/27/pip%E5%AE%89%E8%A3%85%E5%A4%AA%E6%85%A2%E6%9B%B4%E6%8D%A2%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/</guid>
      <description>如题：
pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple PyQt5 国内源： 清华：https://pypi.tuna.tsinghua.edu.cn/simple
中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/
华中理工大学：http://pypi.hustunique.com/
山东理工大学：http://pypi.sdutlinux.org/
豆瓣：http://pypi.douban.com/simple/</description>
    </item>
    
    <item>
      <title>Docker镜像构建和发布</title>
      <link>http://fuyi.fun/2020/11/26/docker%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E5%92%8C%E5%8F%91%E5%B8%83/</link>
      <pubDate>Thu, 26 Nov 2020 11:21:54 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/26/docker%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E5%92%8C%E5%8F%91%E5%B8%83/</guid>
      <description>构建： docker build - &amp;lt; Dockerfile 发布：  打tag  docker tag fa1dad7f37e4 fugreat/nrf52 push  docker push fugreat/nrf52 </description>
    </item>
    
    <item>
      <title>使用doker搭建nrf52开发环境</title>
      <link>http://fuyi.fun/2020/11/26/%E4%BD%BF%E7%94%A8doker%E6%90%AD%E5%BB%BAnrf52%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Thu, 26 Nov 2020 11:11:27 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/26/%E4%BD%BF%E7%94%A8doker%E6%90%AD%E5%BB%BAnrf52%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>目标 搭建NRF52的开发环境；
简化环境搭建复杂度，跨平台适配开发环境；
方法   安装docker
  下载nrf52开发环境 docker pull fugreat/nrf52
  创建容器
  docker run --name nrf52-1 -v /Users/user_name/data:/data -itd fugreat/nrf52 bash  此步把 /Users/user_name/data目录映射到编译环境的/data中
 编译  docker exec -it nrf52 bash -c &amp;#34;cd /data/project_name &amp;amp;&amp;amp; make&amp;#34; 启/停容器  docker start nrf52 docker stop nrf52 </description>
    </item>
    
    <item>
      <title>MacOS安装nrfutil</title>
      <link>http://fuyi.fun/2020/11/26/macos%E5%AE%89%E8%A3%85nrfutil/</link>
      <pubDate>Thu, 26 Nov 2020 11:09:19 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/26/macos%E5%AE%89%E8%A3%85nrfutil/</guid>
      <description>参考：https://infocenter.nordicsemi.com/index.jsp?topic=%2Fug_nrfutil%2FUG%2Fnrfutil%2Fnrfutil_intro.html
pip install nrfutil macOS: pip install --ignore-installed six nrfutil ～～～～～～～～～～～～～
Installing from PyPI nRF Util is available as a package in the Python Package Index (PyPI) and can be downloaded and installed directly using the Python installer program pip. Enter the following command to install the latest published version from PyPI: pip install nrfutil This command installs nRF Util and all required packages. When installing on macOS, you might get an error about the Python module six.</description>
    </item>
    
    <item>
      <title>Docker覆盖entrypoint</title>
      <link>http://fuyi.fun/2020/11/25/docker%E8%A6%86%E7%9B%96entrypoint/</link>
      <pubDate>Wed, 25 Nov 2020 10:17:53 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/25/docker%E8%A6%86%E7%9B%96entrypoint/</guid>
      <description>在使用docker简化编译环境搭建过程中碰到一个问题是 pull下来的镜像默认提供entrypoint，自动对指定的目录进行编译(运行make)。
但是在实际使用过程中，可能需要带参数或者make不同的目标。
因为需要屏蔽掉默认的entrypoint。
屏蔽方法是：
# 进入镜像的， 运行bash docker run -it --entrypoint /bin/bash [docker_image] # 在上面基础上运行自己想要的指令，如 docker run -it --entrypoint /bin/bash -c &amp;#34;cd /code &amp;amp;&amp;amp; make -j8 &amp;amp;&amp;amp; make flash&amp;#34; [docker_imag】 </description>
    </item>
    
    <item>
      <title>文件共享seafile</title>
      <link>http://fuyi.fun/2020/11/23/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%ABseafile/</link>
      <pubDate>Mon, 23 Nov 2020 15:13:35 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/23/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%ABseafile/</guid>
      <description>文件共享服务 目标 组内文件共享；
安装 点此查看官方文档的详细安装步骤。
摘抄如下，docker下安装： 1.下载docker-compose.yml
wget https://docs.seafile.com/d/cb1d3f97106847abbf31/files/?p=/docker/docker-compose.yml 2.按照实际情况修改配置：
version: &amp;#39;2.0&amp;#39; services: db: image: mariadb:10.1 container_name: seafile-mysql environment: - MYSQL_ROOT_PASSWORD=db_dev # Requested, set the root&amp;#39;s password of MySQL service. - MYSQL_LOG_CONSOLE=true volumes: - /opt/seafile-mysql/db:/var/lib/mysql # Requested, specifies the path to MySQL data persistent store. networks: - seafile-net memcached: image: memcached:1.5.6 container_name: seafile-memcached entrypoint: memcached -m 256 networks: - seafile-net seafile: image: seafileltd/seafile-mc:latest container_name: seafile ports: - &amp;#34;80:80&amp;#34; # - &amp;#34;443:443&amp;#34; # If https is enabled, cancel the comment.</description>
    </item>
    
    <item>
      <title>在线绘制cad</title>
      <link>http://fuyi.fun/2020/11/16/%E5%9C%A8%E7%BA%BF%E7%BB%98%E5%88%B6cad/</link>
      <pubDate>Mon, 16 Nov 2020 12:06:11 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/16/%E5%9C%A8%E7%BA%BF%E7%BB%98%E5%88%B6cad/</guid>
      <description>MxDraw 在线打开、绘制cad文件 http://www.mxdraw.com/help_5_20101.html
支持js调用；
需要在win下浏览的本级安装插件才可以使用；
macOS支持不好；</description>
    </item>
    
    <item>
      <title>本安电源分析</title>
      <link>http://fuyi.fun/2020/11/13/%E6%9C%AC%E5%AE%89%E7%94%B5%E6%BA%90%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 13 Nov 2020 09:12:35 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/13/%E6%9C%AC%E5%AE%89%E7%94%B5%E6%BA%90%E5%88%86%E6%9E%90/</guid>
      <description>本安电路电源分析
1、电芯输出端保险丝F3、限流电阻R16是短路保护和限制短路电流的器件，是必须要用的。
2、R7、Q7、Q3、R9、D3是过电流保护，电流通过取样电阻R7两端的压降来调节Q7的导通角，从而使Q3的基极电压高低变化，使得通过Q3的负载电流得到控制；同理R8、Q8、Q4、R10、D4功能完全一样，只不过是与前面的一组过电流保护串联在电路中。
3、U2与电阻R12、R14组成输出稳压电路，即使电芯电压波动也能保证负载上的电压恒定。
4、因为是本安电源，必须做二次保护验证的，上面回复的第二点中就是为了满足这个要求。认证过程是当短接Q3时还有Q4正常做过电流保护，当短接Q4时则有Q3正常做过电流保护，且无论短接Q3还是Q4必须保证电流保护的动作值是完全一样的。
5、因为是本安电源，R16是必须有的，当做短路验证时，就由这个保证短路电流符合认证要求的。</description>
    </item>
    
    <item>
      <title>Rt Thread_线程</title>
      <link>http://fuyi.fun/2020/11/12/rt-thread_%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Thu, 12 Nov 2020 09:32:42 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/12/rt-thread_%E7%BA%BF%E7%A8%8B/</guid>
      <description>动态线程和静态线程范例 thread1 是一个静态线程对象，而 thread2 是一个动态线程对象。
thread1 对象的内存空间，包括线程控制块 thread1 与栈空间 thread1_stack 都是编译时决定的，因为代码中都不存在初始值，都统一放在未初始化数据段中。
thread2 运行中用到的空间都是动态分配的，包括线程控制块（thread2_ptr 指向的内容）和栈空间。
静态对象会占用 RAM 空间，不依赖于内存堆管理器，内存分配时间确定。 动态对象则依赖于内存堆管理器，运行时申请 RAM 空间，当对象被删除后，占用的 RAM 空间被释放。 这两种方式各有利弊，可以根据实际环境需求选择具体使用方式。
/* 线程 1 的对象和运行时用到的栈 */ static struct rt_thread thread1; static rt_uint8_t thread1_stack[512];  /* 线程 1 入口 */ void thread1_entry(void* parameter) {  int i;   while (1)  {  for (i = 0; i &amp;lt; 10; i ++)  {  rt_kprintf(&amp;#34;%d\n&amp;#34;, i);   /* 延时 100ms */  rt_thread_mdelay(100);  }  } }  /* 线程 2 入口 */ void thread2_entry(void* parameter) {  int count = 0;  while (1)  {  rt_kprintf(&amp;#34;Thread2 count:%d\n&amp;#34;, ++count);   /* 延时 50ms */  rt_thread_mdelay(50);  } }  /* 线程例程初始化 */ int thread_sample_init() {  rt_thread_t thread2_ptr;  rt_err_t result;   /* 初始化线程 1 */  /* 线程的入口是 thread1_entry，参数是 RT_NULL * 线程栈是 thread1_stack * 优先级是 200，时间片是 10 个 OS Tick */  result = rt_thread_init(&amp;amp;thread1,  &amp;#34;thread1&amp;#34;,  thread1_entry, RT_NULL,  &amp;amp;thread1_stack[0], sizeof(thread1_stack),  200, 10);   /* 启动线程 */  if (result == RT_EOK) rt_thread_startup(&amp;amp;thread1);   /* 创建线程 2 */  /* 线程的入口是 thread2_entry, 参数是 RT_NULL * 栈空间是 512，优先级是 250，时间片是 25 个 OS Tick */  thread2_ptr = rt_thread_create(&amp;#34;thread2&amp;#34;,  thread2_entry, RT_NULL,  512, 250, 25);   /* 启动线程 */  if (thread2_ptr !</description>
    </item>
    
    <item>
      <title>RT-Thread_编程指南</title>
      <link>http://fuyi.fun/2020/11/12/rt-thread_%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 12 Nov 2020 09:25:45 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/12/rt-thread_%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</guid>
      <description>RT-Thread 编程指南 https://www.rt-thread.org/document/site/programming-manual/basic/basic/
 内核架构： 实时内核的实现包括：对象管理、线程管理及调度器、线程间通信管理、时钟管理及内存管理等等，内核最小的资源占用情况是 3KB ROM，1.2KB RAM。
 RT-Thread 启动流程 RT-Thread 支持多种平台和多种编译器，而 rtthread_startup() 函数是 RT-Thread 规定的统一启动入口。 一般执行顺序是：
系统先从启动文件开始运行， 然后进入 RT-Thread 的启动 rtthread_startup() ，
最后进入用户入口 main()，如下图所示：  启动代码
int rtthread_startup(void) {  rt_hw_interrupt_disable();   /* 板级初始化：需在该函数内部进行系统堆的初始化 */  rt_hw_board_init();   /* 打印 RT-Thread 版本信息 */  rt_show_version();   /* 定时器初始化 */  rt_system_timer_init();   /* 调度器初始化 */  rt_system_scheduler_init();  #ifdef RT_USING_SIGNALS  /* 信号初始化 */  rt_system_signal_init(); #endif   /* 由此创建一个用户 main 线程 */  rt_application_init();   /* 定时器线程初始化 */  rt_system_timer_thread_init();   /* 空闲线程初始化 */  rt_thread_idle_init();   /* 启动调度器 */  rt_system_scheduler_start();   /* 不会执行至此 */  return 0; } 大致可以分为四个部分：</description>
    </item>
    
    <item>
      <title>Stm32_adc的参考源设置</title>
      <link>http://fuyi.fun/2020/11/12/stm32_adc%E7%9A%84%E5%8F%82%E8%80%83%E6%BA%90%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Thu, 12 Nov 2020 09:02:37 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/12/stm32_adc%E7%9A%84%E5%8F%82%E8%80%83%E6%BA%90%E8%AE%BE%E7%BD%AE/</guid>
      <description>转 STM32内部参照电压VREFIN的使用 https://blog.csdn.net/uncle_guo/article/details/50625660
每个STM32芯片都有一个内部的参照电压，相当于一个标准电压测量点，在芯片内部连接到ADC1的通道17。
根据数据手册中的数据，这个参照电压的典型值是1.20V，最小值是1. 16V，最大值是1.24V。
这个电压基本不随外部供电电压的变化而变化。
ADC的参考电压都是通过Vref+提供的。
100脚以上的型号，Vref+引到了片外，引脚名称为Vref+；
64脚和小于64脚的型号，Vref+在芯片内部与VCC信号线相连，没有引到片外，这样AD的参考电压就是VCC上的电压。
在ADC的外部参考电压波动，或因为Vref+在芯片内部与VCC相连而VCC变化的情况下，如果对于ADC测量的准确性要求不高时，可以使用这个内部参照电压得到ADC测量的电压值。
具体方法是在测量某个通道的电压值之前，先读出参照电压的ADC测量数值，记为ADrefint；再读出要测量通道的ADC转换数值，记为ADchx；则要测量的电压为：
Vchx = Vrefint * (ADchx/ADrefint)
其中Vrefint为参照电压=1.20V（STM32F107）。
如何用VDDA作为ADC参考电压，当测量信号电压超过这个范围可以用精密电阻分压或者放大器分压，或者选择合适的外部电压基准芯片。</description>
    </item>
    
    <item>
      <title>LED滚动屏</title>
      <link>http://fuyi.fun/2020/11/11/led%E6%BB%9A%E5%8A%A8%E5%B1%8F/</link>
      <pubDate>Wed, 11 Nov 2020 13:11:58 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/led%E6%BB%9A%E5%8A%A8%E5%B1%8F/</guid>
      <description>LED 滚动屏模组
模组（单元板）上的显示接口：显示接口是用于控制卡和模组（单元板）、模组（单元板）和模组（单元板）之间的连接，以将控制信号进行传递。
由于存在不同的扫描方式及信号线的不同排列顺序，也就有不同的接口定义。使用最多的是08接口、12接口、75接口、40接口。
室内单双色点阵单元板多用08接口，
户外单双色模组多用12接口，
扫描驱动的全彩模组多用75接口，
静态驱动的全彩模组多用40接口。
接口定义 不同的接口定义主要是信号线的排列顺序不一样，首先我们来了解下控制信号有哪些：
  CLK（时钟信号）：提供给移位寄存器的移位脉冲，每一个脉冲的上升沿将引起数据移入或移出一位。
数据口上的数据必须与时钟信号协调才能正常传送数据，数据信号的频率必须是时钟信号的频率的1/2倍。
在任何情况下，当时钟信号有异常时，会使整板显示杂乱无章。
  STB（锁存信号）：将移位寄存器内的数据送到锁存器，并将其数据内容通过驱动电路点亮LED显示出来。
但由于驱动电路受OE（输出使能信号）控制，其点亮的前提必须是OE为开启状态。
锁存信号也必须要与时钟信号协调才能显示出完整的图像。
在任何情况下，当锁存信号有异常时，会使整板显示杂乱无章。
  OE（输出使能信号）：整屏亮度控制信号，也用于显示屏消隐。
只要调整它的占空比就可以控制亮度的变化。当使能信号出现异常时，整屏将会出现不亮、暗亮或拖尾等现象。
  R/G/B（数据信号）：提供显示图像所需要的数据。必须与时钟信号协调才能将数据传送到任何一个显示点。 一般在显示屏中红绿蓝的数据信号分离开来，若某数据信号短路到正极或负极时，则对应的该颜色将会出现全亮或不亮， 当数据信号被悬空时对应的颜色显示情况不定。
  ABCD（行控制信号）：只有在动态扫描显示时才存在，一般电路会搭配74HC138D的IC进行控制， 1/4扫描中只要AB信号就可以了。 当行控制信号出现异常时，将会出现显示错位、高亮或图像重叠等现象。
  </description>
    </item>
    
    <item>
      <title>管径对照表</title>
      <link>http://fuyi.fun/2020/11/11/%E7%AE%A1%E5%BE%84%E5%AF%B9%E7%85%A7%E8%A1%A8/</link>
      <pubDate>Wed, 11 Nov 2020 12:55:31 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/%E7%AE%A1%E5%BE%84%E5%AF%B9%E7%85%A7%E8%A1%A8/</guid>
      <description>管子口径对照表：
型号尺寸说明 1分=DN6=1/8 2分=DN8=1/4 3分=DN10=3/8 4分=DN15=1/2 6分=DN20=3/4 1寸=DN25 1.2寸=DN32=1-1/4 1.5寸=DN40=1-1/2 2寸=DN50 3寸=DN65=2-1/2 4寸=DN100 DN15 12.7mm， DN20 19.05mm， DN25 25.4mm， DN32 31.75mm， DN40 38.1mm， DN50 50.8mm。 1、DN15....4分管子，内径15mm，外径23mm,壁厚4m 2、DN20....6分管子，内径20mm，外径27mm,壁厚3，5mm 3、DN25....1寸管子，内径25mm，外径32mm,壁厚3，5mm 4、DN32....(1由四分之3寸）内径32mm，外径38mm,壁厚3mm 5、DN40....(1由二分之1寸）.内径40mm，外径48mm,壁厚4mm 6、DN50是2寸管子，内径50mm，外径56mm,壁厚3mm </description>
    </item>
    
    <item>
      <title>气体监测仪铭牌设计</title>
      <link>http://fuyi.fun/2020/11/11/%E6%B0%94%E4%BD%93%E7%9B%91%E6%B5%8B%E4%BB%AA%E9%93%AD%E7%89%8C%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 11 Nov 2020 12:54:10 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/%E6%B0%94%E4%BD%93%E7%9B%91%E6%B5%8B%E4%BB%AA%E9%93%AD%E7%89%8C%E8%AE%BE%E8%AE%A1/</guid>
      <description>铭牌相关法规：
防爆：
《GB3836.1-2010 爆炸性环境 第1部分：设备 通用要求.pdf》 29标志
《GB3836.4-2010 爆炸性环境 第4部分：由本质安全型“i”保护的设备.pdf》 12 标志
计量：
《JJF 1364-2012 二氧化硫气体检测仪型式评价大纲》 5.3 计量法制标志和计量器具标识的要求
《可燃气体检测报警器型式评价大纲JJF1368-2012.pdf》 5.3 计量法制标志和计量器具标识的要求</description>
    </item>
    
    <item>
      <title>RK3288 编译三部曲</title>
      <link>http://fuyi.fun/2020/11/11/rk3288-%E7%BC%96%E8%AF%91%E4%B8%89%E9%83%A8%E6%9B%B2/</link>
      <pubDate>Wed, 11 Nov 2020 12:48:55 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/rk3288-%E7%BC%96%E8%AF%91%E4%B8%89%E9%83%A8%E6%9B%B2/</guid>
      <description> 安装相应依赖库文件，以及交叉编译工具和配置环境变量； 编译u-boot； 编译kernel； 编译android；     下载文件
https://blog.csdn.net/Chhjnavy/article/details/96739573
  RK3288 android7.1.2 内核极其源码编译详细步骤
https://blog.csdn.net/Chhjnavy/article/details/95043440?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight
  自动编译
https://blog.csdn.net/shao15232/article/details/102487625
https://blog.csdn.net/chhjnavy/article/details/95043440?utm_medium=distribute.pc_relevant.none-task-blog-title-1&amp;amp;spm=1001.2101.3001.4242
  </description>
    </item>
    
    <item>
      <title>Linux常用命令</title>
      <link>http://fuyi.fun/2020/11/11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 11 Nov 2020 12:45:43 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description> scp 限速 scp 限速
-l 是限速配置
-l limit 其中 -l 5000 大约是 5000/8 600多点KB/S
 多核编译 make -jN N表示使能的核数
 </description>
    </item>
    
    <item>
      <title>论文解读：基于双窄带LED光源的红外甲烷传感器的研制  </title>
      <link>http://fuyi.fun/2020/11/11/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB%E5%9F%BA%E4%BA%8E%E5%8F%8C%E7%AA%84%E5%B8%A6led%E5%85%89%E6%BA%90%E7%9A%84%E7%BA%A2%E5%A4%96%E7%94%B2%E7%83%B7%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E7%A0%94%E5%88%B6/</link>
      <pubDate>Wed, 11 Nov 2020 10:48:40 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB%E5%9F%BA%E4%BA%8E%E5%8F%8C%E7%AA%84%E5%B8%A6led%E5%85%89%E6%BA%90%E7%9A%84%E7%BA%A2%E5%A4%96%E7%94%B2%E7%83%B7%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E7%A0%94%E5%88%B6/</guid>
      <description>论文解读：基于双窄带LED光源的红外甲烷传感器的研制
赵庆川
特点： 有温度补偿；
双路光源做差得到甲烷浓度； 低功耗16mW；
系统框图：
甲烷和水蒸气的吸收峰:
LED电流和光强: 设备结构: 论文全文: 基于双窄带LED光源的红外甲烷传感器的研制 赵庆川</description>
    </item>
    
    <item>
      <title>Float_to_hex</title>
      <link>http://fuyi.fun/2020/11/11/float_to_hex/</link>
      <pubDate>Wed, 11 Nov 2020 10:46:35 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/float_to_hex/</guid>
      <description>浮点转hex 在线: https://www.h-schmidt.net/FloatConverter/IEEE754.html</description>
    </item>
    
    <item>
      <title>esp32 mesh WI-FI MESH</title>
      <link>http://fuyi.fun/2020/11/11/esp32-mesh-wi-fi-mesh/</link>
      <pubDate>Wed, 11 Nov 2020 10:44:51 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/esp32-mesh-wi-fi-mesh/</guid>
      <description>官方文档： https://docs.espressif.com/projects/esp-idf/zh_CN/stable/get-started/index.html
MacOS下搭建开发环境 https://docs.espressif.com/projects/esp-idf/zh_CN/stable/get-started/macos-setup.html
网络拓扑说明： https://docs.espressif.com/projects/esp-idf/en/stable/api-guides/mesh.html</description>
    </item>
    
    <item>
      <title>Homebrew 命令迁移到新电脑 </title>
      <link>http://fuyi.fun/2020/11/11/homebrew-%E5%91%BD%E4%BB%A4%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/</link>
      <pubDate>Wed, 11 Nov 2020 10:41:08 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/homebrew-%E5%91%BD%E4%BB%A4%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/</guid>
      <description>这里的备份不是简单把这些安装包备份到硬盘，而是备份安装安装了哪些命令行，安装的时候用了什么选项。
homebrew为我们提供了非常方便的子命令：bundle
 brew bundle dump
首次执行上面这条命令，将会自动tap homebrew/bundle， 然后将以往安装的命令以及安装的命令行选项保存在当前的路径下的Brewfile。 用编辑器打开来看其实就是一个脚本包含了所有已经安装的命令行以及相应的选项。 你要备份的文件就是这个Brewfile
在全新的macOS上想要恢复的话，就使用该Brewfile. brew bundle
该命令会在当前文件夹下寻找Brewfile文件然后开始执行。</description>
    </item>
    
    <item>
      <title>Nodejs遍历数组</title>
      <link>http://fuyi.fun/2020/11/11/nodejs%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/</link>
      <pubDate>Wed, 11 Nov 2020 10:38:21 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/nodejs%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/</guid>
      <description>nodejs 遍历数组： 参考： https://blog.csdn.net/he_min/article/details/82912729
var array = [1,2,3]; // 方式一： array.forEach(function(v,index,a){ console.log(v); console.log(index); console.log(a); }); // 方式二： array.forEach(v =&amp;gt; console.log(v)); </description>
    </item>
    
    <item>
      <title>清除mac中的敏感信息</title>
      <link>http://fuyi.fun/2020/11/11/%E6%B8%85%E9%99%A4mac%E4%B8%AD%E7%9A%84%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Wed, 11 Nov 2020 10:32:53 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/%E6%B8%85%E9%99%A4mac%E4%B8%AD%E7%9A%84%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF/</guid>
      <description>&lt;p&gt;离职交接归还电脑时，需要清除电脑中的敏感数据，总结如下：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【转载】在线门禁通信协议</title>
      <link>http://fuyi.fun/2020/11/11/%E8%BD%AC%E8%BD%BD%E5%9C%A8%E7%BA%BF%E9%97%A8%E7%A6%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Wed, 11 Nov 2020 10:23:32 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/%E8%BD%AC%E8%BD%BD%E5%9C%A8%E7%BA%BF%E9%97%A8%E7%A6%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</guid>
      <description>&lt;h2 id=&#34;查询设备&#34;&gt;查询设备&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>Install_wiki</title>
      <link>http://fuyi.fun/2020/11/11/install_wiki/</link>
      <pubDate>Wed, 11 Nov 2020 10:21:16 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/install_wiki/</guid>
      <description>Docker 下安装wiki 下载镜像：
docker pull amyhre/docuwiki
运行： docker run -d -v docuwiki_data:/var/www/html --name docuwiki -p 80:80 amyhre/docuwiki</description>
    </item>
    
    <item>
      <title>Docker下安装thingsboard</title>
      <link>http://fuyi.fun/2020/11/11/docker%E4%B8%8B%E5%AE%89%E8%A3%85thingsboard/</link>
      <pubDate>Wed, 11 Nov 2020 10:01:51 +0800</pubDate>
      
      <guid>http://fuyi.fun/2020/11/11/docker%E4%B8%8B%E5%AE%89%E8%A3%85thingsboard/</guid>
      <description>&lt;h2 id=&#34;docker-下安装-thingsboard&#34;&gt;Docker 下安装 thingsboard&lt;/h2&gt;
&lt;p&gt;镜像地址：https://hub.docker.com/r/thingsboard/tb-cassandra/&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用封面图片的shortcode</title>
      <link>http://fuyi.fun/2017/05/20/%E4%BD%BF%E7%94%A8%E5%B0%81%E9%9D%A2%E5%9B%BE%E7%89%87%E7%9A%84shortcode/</link>
      <pubDate>Sat, 20 May 2017 12:00:23 +0200</pubDate>
      
      <guid>http://fuyi.fun/2017/05/20/%E4%BD%BF%E7%94%A8%E5%B0%81%E9%9D%A2%E5%9B%BE%E7%89%87%E7%9A%84shortcode/</guid>
      <description>&lt;p&gt;在页面中添加封面的shortcode。
复制下面的代码进你的page，修改相关的路径。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://fuyi.fun/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fuyi.fun/1/01/01/</guid>
      <description>i&amp;mdash; title: &amp;ldquo;Docker加sudo&amp;rdquo; date: 2021-01-14T21:00:23+08:00 draft: false banner : &amp;quot;&amp;quot; categories : [&amp;ldquo;技术&amp;rdquo;] description : &amp;quot;&amp;quot; menu : &amp;quot;&amp;quot; tags : [&amp;ldquo;docker&amp;rdquo;, &amp;ldquo;sudo&amp;rdquo;] docker加sudo
1.创建docker组：sudo groupadd docker
2.将当前用户加入docker组：sudo gpasswd -a ${USER} docker
3.重启服务：sudo service docker restart
4.刷新docker成员：newgrp - docker</description>
    </item>
    
  </channel>
</rss>
